package pattern

import (
	"fmt"
	"sort"
)

/*
Реализовать паттерн «стратегия».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
https://en.wikipedia.org/wiki/Strategy_pattern
*/

type iStrategy interface {
	algorithm(s []int) int
}

func run(s []int, alg iStrategy) {
	fmt.Println("result:", alg.algorithm(s))
}

type min struct {
}

func (m min) algorithm(s []int) int {
	sort.Ints(s)
	return s[0]
}

type max struct {
}

func (m max) algorithm(s []int) int {
	sort.Ints(s)
	return s[len(s)-1]
}

/*
Стратегия — это поведенческий паттерн проектирования,
который определяет семейство схожих алгоритмов и помещает каждый из них в собственный класс,
после чего алгоритмы можно взаимозаменять прямо во время исполнения программы.


Преимущества
- Горячая замена алгоритмов на лету.
- Изолирует код и данные алгоритмов от остальных классов.
- Уход от наследования к делегированию.
- Реализует принцип открытости/закрытости.

Недостатки
- Усложняет программу за счёт дополнительных классов.
- Клиент должен знать, в чём состоит разница между стратегиями, чтобы выбрать подходящую.
*/
